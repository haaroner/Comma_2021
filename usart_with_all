#include "project_config.h"
#include "pin_setup.h"
#include "time_service.h"
#include "adc.h"
#include "dma.h"
#include "usart6.h"
#include "soft_i2c.h"
#include "IRLocator.h"
#include "Motor_Pin.h"
#include "motor.h"
#include "odom.h"
#include "motors.h"

#define CHANNEL1 1
#define CHANNEL2 2
#define CHANNEL3 3
#define CHANNEL4 4


int main()

{
	Motor_Pin m1p1(GPIOD,//without
									GPIO_Pin_12,
									GPIO_PinSource12,
									GPIO_AF_TIM4);
	Motor_Pin m1p2(GPIOD,
									GPIO_Pin_13,
									GPIO_PinSource13,
									GPIO_AF_TIM4);
	Motor m1(m1p1, m1p2);
	m1.motorPWMInit(RCC_APB1ENR_TIM4EN,
									CHANNEL1,
									TIM4,
									RCC_APB1ENR_TIM4EN,
									CHANNEL2,
									TIM4);//without
	
	Motor_Pin m2p1(GPIOB,//green
									GPIO_Pin_14,
									GPIO_PinSource14,
									GPIO_AF_TIM12);
	Motor_Pin m2p2(GPIOB,
									GPIO_Pin_15,
									GPIO_PinSource15,
									GPIO_AF_TIM12);
	Motor m2(m2p1, m2p2);
	m2.motorPWMInit(RCC_APB1ENR_TIM12EN,
									CHANNEL1,
									TIM12,
									RCC_APB1ENR_TIM12EN,
									CHANNEL2,
									TIM12);//green
	
	Motor_Pin m3p1(GPIOD,//white
									GPIO_Pin_14,
									GPIO_PinSource14,
									GPIO_AF_TIM4);
	Motor_Pin m3p2(GPIOD,
									GPIO_Pin_15,
									GPIO_PinSource15,
									GPIO_AF_TIM4);
	Motor m3(m3p1, m3p2);
	m3.motorPWMInit(RCC_APB1ENR_TIM4EN,
									CHANNEL3,
									TIM4,
									RCC_APB1ENR_TIM4EN,
									CHANNEL4,
									TIM4);//wite
	
	Motor_Pin m4p1(GPIOA,//blue 
									GPIO_Pin_6,
									GPIO_PinSource6,
									GPIO_AF_TIM13);
	Motor_Pin m4p2(GPIOA,
									GPIO_Pin_7,
									GPIO_PinSource7,
									GPIO_AF_TIM14);
	Motor m4(m4p1, m4p2);
	m4.motorPWMInit(RCC_APB1ENR_TIM13EN,
									CHANNEL1,
									TIM13,
									RCC_APB1ENR_TIM14EN,
									CHANNEL1,
									TIM14); //blue 
									
	pin usart6_tx(GPIOC,//without
									GPIO_Pin_6,
									GPIO_Mode_AF,
									GPIO_Speed_100MHz,
									GPIO_OType_PP,
									GPIO_PuPd_NOPULL,
									GPIO_PinSource6,
									GPIO_AF_USART6);
	pin usart6_rx(GPIOC,
									GPIO_Pin_7,
									GPIO_Mode_AF,
									GPIO_Speed_100MHz,
									GPIO_OType_PP,
									GPIO_PuPd_NOPULL,
									GPIO_PinSource7,
									GPIO_AF_USART6);
Motors motors;
//motors.moveMotors(2000,2000,2000,2000);
									
	pin sclPin1(GPIOB,
		GPIO_Pin_8,
		GPIO_Mode_OUT,
		GPIO_Speed_100MHz,
		GPIO_OType_OD,
		GPIO_PuPd_UP,
		GPIO_PinSource8,
		GPIO_AF_I2C1);
	sclPin1.pinInit();
	
	pin sdaPin1(GPIOB,
		GPIO_Pin_9,
		GPIO_Mode_OUT,
		GPIO_Speed_100MHz,
		GPIO_OType_OD,
		GPIO_PuPd_UP,
		GPIO_PinSource9,
		GPIO_AF_I2C1);
	sdaPin1.pinInit();
	
	i2c ir(sclPin1, sdaPin1);
	irLocator locator360(ir, 0x0E);
	time_service::init();
	odom odom(m1, m2, m3, m4);
	//odom.moveMotor(26000);
	volatile int seeker = locator360.getData(0x06) * 5;
	volatile int dist = locator360.getData(0x07);
	int state = 0;
	int e_seeker = 0, p_seeker = 0, k_seeker = -1, x0_seeker = 0;
	int e_gyro = 0, p_angle, k_angle = 1, x0_angle = 0;
	volatile int gyro = 0;
	int speed_seeker = 3095, speed_angle = 1000;
	usart6::usart6Init();
	time_service::delay_ms(3000);
	//for(int i = 0; i < 80000000; i ++);
	while(1)
	{
		//odom.moveRobot(4000, 45);
		gyro = usart6::read();
		if(locator360.getData(0x07) < 14)
		{
			dist = locator360.getData(0x05);
			seeker = locator360.getData(0x04) * 5;
		}
		else
		{
			dist = locator360.getData(0x07);
			seeker = locator360.getData(0x06) * 5;
		}
		gyro = 0 * 2;
		if(state == 0)
		{
			e_seeker = x0_seeker - seeker;
			if(e_seeker < -180)
			{
				e_seeker += 360;
			}
			else if(e_seeker > 180)
			{
			 e_seeker -= 360;
			}
			p_seeker = e_seeker * k_seeker;
			
			e_gyro = x0_angle - seeker;
			p_angle = e_gyro * k_angle;
			odom.moveRobot(speed_seeker, speed_angle, p_seeker, seeker);
		}
		else
		{
			if( seeker > 180)
			{
				x0_seeker = 270;
			}
			else
			{
				x0_seeker = 90;
			}
			e_seeker = x0_seeker - seeker;
			p_seeker = e_seeker * k_seeker;
			//motor
		}
		
		if(gyro > 90 && gyro < 270)
		{
			state = 1;
		}
		else
		{
			state = 0;
		}
		//time_service::delay_ms(1);
	}
	
	
}
